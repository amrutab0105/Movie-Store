#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lab6_Amruta
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="movies")]
	public partial class moviesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertcast(cast instance);
    partial void Updatecast(cast instance);
    partial void Deletecast(cast instance);
    partial void Insertmovie(movie instance);
    partial void Updatemovie(movie instance);
    partial void Deletemovie(movie instance);
    partial void Insertmovie_cast(movie_cast instance);
    partial void Updatemovie_cast(movie_cast instance);
    partial void Deletemovie_cast(movie_cast instance);
    partial void Insertmovie_genre(movie_genre instance);
    partial void Updatemovie_genre(movie_genre instance);
    partial void Deletemovie_genre(movie_genre instance);
    #endregion
		
		public moviesDataContext() : 
				base(global::Lab6_Amruta.Properties.Settings.Default.moviesConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public moviesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public moviesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public moviesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public moviesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<cast> casts
		{
			get
			{
				return this.GetTable<cast>();
			}
		}
		
		public System.Data.Linq.Table<movie> movies
		{
			get
			{
				return this.GetTable<movie>();
			}
		}
		
		public System.Data.Linq.Table<movie_cast> movie_casts
		{
			get
			{
				return this.GetTable<movie_cast>();
			}
		}
		
		public System.Data.Linq.Table<movie_genre> movie_genres
		{
			get
			{
				return this.GetTable<movie_genre>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cast")]
	public partial class cast : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _castID;
		
		private string _name;
		
		private string _gender;
		
		private string _nationality;
		
		private int _birthYear;
		
		private EntitySet<movie> _movies;
		
		private EntitySet<movie_cast> _movie_casts;
		
		private EntitySet<movie_cast> _movie_casts1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncastIDChanging(int value);
    partial void OncastIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OngenderChanging(string value);
    partial void OngenderChanged();
    partial void OnnationalityChanging(string value);
    partial void OnnationalityChanged();
    partial void OnbirthYearChanging(int value);
    partial void OnbirthYearChanged();
    #endregion
		
		public cast()
		{
			this._movies = new EntitySet<movie>(new Action<movie>(this.attach_movies), new Action<movie>(this.detach_movies));
			this._movie_casts = new EntitySet<movie_cast>(new Action<movie_cast>(this.attach_movie_casts), new Action<movie_cast>(this.detach_movie_casts));
			this._movie_casts1 = new EntitySet<movie_cast>(new Action<movie_cast>(this.attach_movie_casts1), new Action<movie_cast>(this.detach_movie_casts1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_castID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int castID
		{
			get
			{
				return this._castID;
			}
			set
			{
				if ((this._castID != value))
				{
					this.OncastIDChanging(value);
					this.SendPropertyChanging();
					this._castID = value;
					this.SendPropertyChanged("castID");
					this.OncastIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nationality", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string nationality
		{
			get
			{
				return this._nationality;
			}
			set
			{
				if ((this._nationality != value))
				{
					this.OnnationalityChanging(value);
					this.SendPropertyChanging();
					this._nationality = value;
					this.SendPropertyChanged("nationality");
					this.OnnationalityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birthYear", DbType="Int NOT NULL")]
		public int birthYear
		{
			get
			{
				return this._birthYear;
			}
			set
			{
				if ((this._birthYear != value))
				{
					this.OnbirthYearChanging(value);
					this.SendPropertyChanging();
					this._birthYear = value;
					this.SendPropertyChanged("birthYear");
					this.OnbirthYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cast_movie", Storage="_movies", ThisKey="castID", OtherKey="directorID")]
		public EntitySet<movie> movies
		{
			get
			{
				return this._movies;
			}
			set
			{
				this._movies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cast_movie_cast", Storage="_movie_casts", ThisKey="castID", OtherKey="actorID")]
		public EntitySet<movie_cast> movie_casts
		{
			get
			{
				return this._movie_casts;
			}
			set
			{
				this._movie_casts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cast_movie_cast1", Storage="_movie_casts1", ThisKey="castID", OtherKey="directorID")]
		public EntitySet<movie_cast> movie_casts1
		{
			get
			{
				return this._movie_casts1;
			}
			set
			{
				this._movie_casts1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_movies(movie entity)
		{
			this.SendPropertyChanging();
			entity.cast = this;
		}
		
		private void detach_movies(movie entity)
		{
			this.SendPropertyChanging();
			entity.cast = null;
		}
		
		private void attach_movie_casts(movie_cast entity)
		{
			this.SendPropertyChanging();
			entity.cast = this;
		}
		
		private void detach_movie_casts(movie_cast entity)
		{
			this.SendPropertyChanging();
			entity.cast = null;
		}
		
		private void attach_movie_casts1(movie_cast entity)
		{
			this.SendPropertyChanging();
			entity.cast1 = this;
		}
		
		private void detach_movie_casts1(movie_cast entity)
		{
			this.SendPropertyChanging();
			entity.cast1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.movie")]
	public partial class movie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _movieID;
		
		private string _title;
		
		private int _releaseYear;
		
		private string _language;
		
		private System.Nullable<int> _rating;
		
		private int _directorID;
		
		private EntitySet<movie_cast> _movie_casts;
		
		private EntitySet<movie_genre> _movie_genres;
		
		private EntityRef<cast> _cast;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmovieIDChanging(int value);
    partial void OnmovieIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnreleaseYearChanging(int value);
    partial void OnreleaseYearChanged();
    partial void OnlanguageChanging(string value);
    partial void OnlanguageChanged();
    partial void OnratingChanging(System.Nullable<int> value);
    partial void OnratingChanged();
    partial void OndirectorIDChanging(int value);
    partial void OndirectorIDChanged();
    #endregion
		
		public movie()
		{
			this._movie_casts = new EntitySet<movie_cast>(new Action<movie_cast>(this.attach_movie_casts), new Action<movie_cast>(this.detach_movie_casts));
			this._movie_genres = new EntitySet<movie_genre>(new Action<movie_genre>(this.attach_movie_genres), new Action<movie_genre>(this.detach_movie_genres));
			this._cast = default(EntityRef<cast>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movieID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int movieID
		{
			get
			{
				return this._movieID;
			}
			set
			{
				if ((this._movieID != value))
				{
					this.OnmovieIDChanging(value);
					this.SendPropertyChanging();
					this._movieID = value;
					this.SendPropertyChanged("movieID");
					this.OnmovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_releaseYear", DbType="Int NOT NULL")]
		public int releaseYear
		{
			get
			{
				return this._releaseYear;
			}
			set
			{
				if ((this._releaseYear != value))
				{
					this.OnreleaseYearChanging(value);
					this.SendPropertyChanging();
					this._releaseYear = value;
					this.SendPropertyChanged("releaseYear");
					this.OnreleaseYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_language", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string language
		{
			get
			{
				return this._language;
			}
			set
			{
				if ((this._language != value))
				{
					this.OnlanguageChanging(value);
					this.SendPropertyChanging();
					this._language = value;
					this.SendPropertyChanged("language");
					this.OnlanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rating", DbType="Int")]
		public System.Nullable<int> rating
		{
			get
			{
				return this._rating;
			}
			set
			{
				if ((this._rating != value))
				{
					this.OnratingChanging(value);
					this.SendPropertyChanging();
					this._rating = value;
					this.SendPropertyChanged("rating");
					this.OnratingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_directorID", DbType="Int NOT NULL")]
		public int directorID
		{
			get
			{
				return this._directorID;
			}
			set
			{
				if ((this._directorID != value))
				{
					if (this._cast.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndirectorIDChanging(value);
					this.SendPropertyChanging();
					this._directorID = value;
					this.SendPropertyChanged("directorID");
					this.OndirectorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="movie_movie_cast", Storage="_movie_casts", ThisKey="movieID", OtherKey="movieID")]
		public EntitySet<movie_cast> movie_casts
		{
			get
			{
				return this._movie_casts;
			}
			set
			{
				this._movie_casts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="movie_movie_genre", Storage="_movie_genres", ThisKey="movieID", OtherKey="movieID")]
		public EntitySet<movie_genre> movie_genres
		{
			get
			{
				return this._movie_genres;
			}
			set
			{
				this._movie_genres.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cast_movie", Storage="_cast", ThisKey="directorID", OtherKey="castID", IsForeignKey=true)]
		public cast cast
		{
			get
			{
				return this._cast.Entity;
			}
			set
			{
				cast previousValue = this._cast.Entity;
				if (((previousValue != value) 
							|| (this._cast.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cast.Entity = null;
						previousValue.movies.Remove(this);
					}
					this._cast.Entity = value;
					if ((value != null))
					{
						value.movies.Add(this);
						this._directorID = value.castID;
					}
					else
					{
						this._directorID = default(int);
					}
					this.SendPropertyChanged("cast");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_movie_casts(movie_cast entity)
		{
			this.SendPropertyChanging();
			entity.movie = this;
		}
		
		private void detach_movie_casts(movie_cast entity)
		{
			this.SendPropertyChanging();
			entity.movie = null;
		}
		
		private void attach_movie_genres(movie_genre entity)
		{
			this.SendPropertyChanging();
			entity.movie = this;
		}
		
		private void detach_movie_genres(movie_genre entity)
		{
			this.SendPropertyChanging();
			entity.movie = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.movie_cast")]
	public partial class movie_cast : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _movieID;
		
		private int _actorID;
		
		private int _directorID;
		
		private EntityRef<cast> _cast;
		
		private EntityRef<cast> _cast1;
		
		private EntityRef<movie> _movie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnmovieIDChanging(int value);
    partial void OnmovieIDChanged();
    partial void OnactorIDChanging(int value);
    partial void OnactorIDChanged();
    partial void OndirectorIDChanging(int value);
    partial void OndirectorIDChanged();
    #endregion
		
		public movie_cast()
		{
			this._cast = default(EntityRef<cast>);
			this._cast1 = default(EntityRef<cast>);
			this._movie = default(EntityRef<movie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movieID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int movieID
		{
			get
			{
				return this._movieID;
			}
			set
			{
				if ((this._movieID != value))
				{
					if (this._movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmovieIDChanging(value);
					this.SendPropertyChanging();
					this._movieID = value;
					this.SendPropertyChanged("movieID");
					this.OnmovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_actorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int actorID
		{
			get
			{
				return this._actorID;
			}
			set
			{
				if ((this._actorID != value))
				{
					if (this._cast.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnactorIDChanging(value);
					this.SendPropertyChanging();
					this._actorID = value;
					this.SendPropertyChanged("actorID");
					this.OnactorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_directorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int directorID
		{
			get
			{
				return this._directorID;
			}
			set
			{
				if ((this._directorID != value))
				{
					if (this._cast1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndirectorIDChanging(value);
					this.SendPropertyChanging();
					this._directorID = value;
					this.SendPropertyChanged("directorID");
					this.OndirectorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cast_movie_cast", Storage="_cast", ThisKey="actorID", OtherKey="castID", IsForeignKey=true)]
		public cast cast
		{
			get
			{
				return this._cast.Entity;
			}
			set
			{
				cast previousValue = this._cast.Entity;
				if (((previousValue != value) 
							|| (this._cast.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cast.Entity = null;
						previousValue.movie_casts.Remove(this);
					}
					this._cast.Entity = value;
					if ((value != null))
					{
						value.movie_casts.Add(this);
						this._actorID = value.castID;
					}
					else
					{
						this._actorID = default(int);
					}
					this.SendPropertyChanged("cast");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cast_movie_cast1", Storage="_cast1", ThisKey="directorID", OtherKey="castID", IsForeignKey=true)]
		public cast cast1
		{
			get
			{
				return this._cast1.Entity;
			}
			set
			{
				cast previousValue = this._cast1.Entity;
				if (((previousValue != value) 
							|| (this._cast1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cast1.Entity = null;
						previousValue.movie_casts1.Remove(this);
					}
					this._cast1.Entity = value;
					if ((value != null))
					{
						value.movie_casts1.Add(this);
						this._directorID = value.castID;
					}
					else
					{
						this._directorID = default(int);
					}
					this.SendPropertyChanged("cast1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="movie_movie_cast", Storage="_movie", ThisKey="movieID", OtherKey="movieID", IsForeignKey=true)]
		public movie movie
		{
			get
			{
				return this._movie.Entity;
			}
			set
			{
				movie previousValue = this._movie.Entity;
				if (((previousValue != value) 
							|| (this._movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._movie.Entity = null;
						previousValue.movie_casts.Remove(this);
					}
					this._movie.Entity = value;
					if ((value != null))
					{
						value.movie_casts.Add(this);
						this._movieID = value.movieID;
					}
					else
					{
						this._movieID = default(int);
					}
					this.SendPropertyChanged("movie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.movie_genre")]
	public partial class movie_genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _movieID;
		
		private int _genreID;
		
		private string _genreName;
		
		private EntityRef<movie> _movie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmovieIDChanging(int value);
    partial void OnmovieIDChanged();
    partial void OngenreIDChanging(int value);
    partial void OngenreIDChanged();
    partial void OngenreNameChanging(string value);
    partial void OngenreNameChanged();
    #endregion
		
		public movie_genre()
		{
			this._movie = default(EntityRef<movie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movieID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int movieID
		{
			get
			{
				return this._movieID;
			}
			set
			{
				if ((this._movieID != value))
				{
					if (this._movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmovieIDChanging(value);
					this.SendPropertyChanging();
					this._movieID = value;
					this.SendPropertyChanged("movieID");
					this.OnmovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genreID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int genreID
		{
			get
			{
				return this._genreID;
			}
			set
			{
				if ((this._genreID != value))
				{
					this.OngenreIDChanging(value);
					this.SendPropertyChanging();
					this._genreID = value;
					this.SendPropertyChanged("genreID");
					this.OngenreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genreName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string genreName
		{
			get
			{
				return this._genreName;
			}
			set
			{
				if ((this._genreName != value))
				{
					this.OngenreNameChanging(value);
					this.SendPropertyChanging();
					this._genreName = value;
					this.SendPropertyChanged("genreName");
					this.OngenreNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="movie_movie_genre", Storage="_movie", ThisKey="movieID", OtherKey="movieID", IsForeignKey=true)]
		public movie movie
		{
			get
			{
				return this._movie.Entity;
			}
			set
			{
				movie previousValue = this._movie.Entity;
				if (((previousValue != value) 
							|| (this._movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._movie.Entity = null;
						previousValue.movie_genres.Remove(this);
					}
					this._movie.Entity = value;
					if ((value != null))
					{
						value.movie_genres.Add(this);
						this._movieID = value.movieID;
					}
					else
					{
						this._movieID = default(int);
					}
					this.SendPropertyChanged("movie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
